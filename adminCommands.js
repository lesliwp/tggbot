const { Markup } = require('telegraf');
const dbHandlers = require('./dbHandlers');
const config = require('../data/config.json');
const { mainKeyboard, getMenuForLang, generalCommands, adminCommands } = require('./keyboardConfig');

module.exports = function (bot) {
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.command('addbutton', (ctx) => {
    ctx.session.isAddingButton = true;
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:');
});
// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.on('text', (ctx) => {
    if (ctx.session.isAddingButton) {
        const title = ctx.message.text;
        const command = title.toLowerCase().replace(/\s+/g, '_');

        dbHandlers.addNewButton(title, command, (err) => {
            if (err) {
                ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.');
                console.error(err);
            } else {
                ctx.reply('–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.');
            }
        });

        ctx.session.isAddingButton = false;
    }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.command('deletebutton', (ctx) => {
    dbHandlers.getAllButtons((err, rows) => {
        if (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–æ–ø–æ–∫.');
            console.error(err);
            return;
        }

        if (rows.length === 0) {
            ctx.reply('–ö–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.');
            return;
        }

        const buttonsDB = rows.map(row => Markup.button.callback(row.title, `delete_${row.title}`));
        const keyboardDB = Markup.inlineKeyboard(buttonsDB);
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', keyboardDB);
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
bot.action(/delete_(.+)/, (ctx) => {
    const titleToDelete = ctx.match[1];

    if (titleToDelete === 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
        ctx.reply('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".');
        return;
    }

    dbHandlers.deleteButton(titleToDelete, (err) => {
        if (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏.');
            console.error(err);
        } else {
            ctx.reply(`–ö–Ω–æ–ø–∫–∞ "${titleToDelete}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.`);
        }
    });
});


// bot.action('set_lang_ru', (ctx) => {
//     const userId = ctx.from.id;
//     const userName = ctx.from.first_name;
//     // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º 'ru'
//     dbHandlers.setUserLanguage(userId, 'ru', (err) => {
//         if (err) {
//             ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
//             return;
//         }

//         dbHandlers.getUserProfile(userId, (err, userProfile) => {
//             if (err) {
//                 ctx.reply('Failed to retrieve user profile.');
//                 return;
//             }

//         let profileMessage = `*–ü—Ä–∏–≤–µ—Ç* ${userProfile.name}\n`;
//         profileMessage += "üí∞ *–ë–∞–ª–∞–Ω—Å:* `"+userProfile.balance.toFixed(2)+"`*$*\n";
//         profileMessage += `üîÑ *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* ${userProfile.referrals}\n`;
//         profileMessage += `üéÅ *–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞:* ${userProfile.discountPercent}*%*\n`;
//         profileMessage += `üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* ${userProfile.registrationDate}\n`;
//         profileMessage += "üÜî *ID:* `"+ctx.from.id+"`\n";
//         profileMessage += `üåê *–Ø–∑—ã–∫:* ${userProfile.lang}\n`;
//         const profileKeyboard = Markup.inlineKeyboard([
//             [Markup.button.callback('üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'replenish_balance'), Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'referral_system')],
//             [Markup.button.callback('üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'tech_support'), Markup.button.callback('üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw_funds')],
//             [Markup.button.callback('üõç –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏', 'my_purchases'), Markup.button.callback('üåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞', 'set_lang_en')]
//           ]);
//         ctx.replyWithMarkdown(profileMessage, profileKeyboard);
//     });
//   });
// });

bot.action('set_lang_ru', (ctx) => {
    const userId = ctx.from.id;

    // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º 'ru'
    dbHandlers.setUserLanguage(userId, 'ru', (err) => {
        if (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dbHandlers.getUserProfile(userId, (err, userProfile) => {
            if (err) {
                ctx.reply('Failed to retrieve user profile.');
                return;
            }


                let profileMessage = `*–ü—Ä–∏–≤–µ—Ç* ${userProfile.name}\n`;
                profileMessage += "üí∞ *–ë–∞–ª–∞–Ω—Å:* `" + userProfile.balance.toFixed(2) + "`*$*\n";
                profileMessage += `üîÑ *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* ${userProfile.referrals}\n`;
                profileMessage += `üéÅ *–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞:* ${userProfile.discountPercent}*%*\n`;
                profileMessage += `üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* ${userProfile.registrationDate}\n`;
                profileMessage += "üÜî *ID:* `" + userId + "`\n";
                profileMessage += `üåê *–Ø–∑—ã–∫:* ${userProfile.lang}\n`;
                const profileKeyboard = Markup.inlineKeyboard([
                    [Markup.button.callback('üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'replenish_balance'), Markup.button.callback('üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', 'referral_system')],
                    [Markup.button.callback('üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'tech_support'), Markup.button.callback('üí∏ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'withdraw_funds')],
                    [Markup.button.callback('üõç –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏', 'my_purchases'), Markup.button.callback('üåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞', 'set_lang_en')]
                ]);
                const isAdmin = ctx.from.id.toString() === config.admin_id; // –ò–ª–∏ –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
                ctx.reply('–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', getMenuForLang('ru', isAdmin))
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ctx.editMessageText(profileMessage,{
                    parse_mode: 'Markdown',
                    reply_markup: profileKeyboard.reply_markup
                }).catch(error => {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —É–∂–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    ctx.replyWithMarkdown(profileMessage, profileKeyboard);
                });
                
        });
    });
});

bot.action('set_lang_en', (ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name;
    
    // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dbHandlers.setUserLanguage(userId, 'en', (err) => {
        if (err) {
            ctx.reply('An error occurred during registration.');
            return;
        }
        
        // –ó–∞—Ç–µ–º –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dbHandlers.getUserProfile(userId, (err, userProfile) => {
            if (err) {
                ctx.reply('Failed to retrieve user profile.');
                return;
            }
            
            let profileMessage = `*Hello* ${userProfile.name}\n`;
            profileMessage += "üí∞ *Balance:* `"+userProfile.balance.toFixed(2)+"`*$*\n";
            profileMessage += `üîÑ *Refferals:* ${userProfile.referrals}\n`;
            profileMessage += `üéÅ *Discount:* ${userProfile.discountPercent}*%*\n`;
            profileMessage += `üìÖ *Registration:* ${userProfile.registrationDate}\n`;
            profileMessage += "üÜî *ID:* `"+ctx.from.id+"`\n";
            profileMessage += `üåê *Lang:* ${userProfile.lang}\n`;

            const profileKeyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üíµ Add funds', 'replenish_balance'), Markup.button.callback('üë• Referral system', 'referral_system')],
                [Markup.button.callback('üîß Technical support', 'tech_support'), Markup.button.callback('üí∏ Withdrawal funds', 'withdraw_funds')],
                [Markup.button.callback('üõç My purchases', 'my_purchases'), Markup.button.callback('üåê Change lang', 'set_lang_ru')]
            ]);
                const isAdmin = ctx.from.id.toString() === config.admin_id; // –ò–ª–∏ –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
                ctx.reply('Eng lang', getMenuForLang('en', isAdmin))
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                ctx.editMessageText(profileMessage,{
                    parse_mode: 'Markdown',
                    reply_markup: profileKeyboard.reply_markup
                }).catch(error => {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ —É–∂–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    ctx.replyWithMarkdown(profileMessage, profileKeyboard);
                });
                
        });
    });
});

bot.action('create_user_ru', (ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name;
    // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º 'ru'
    dbHandlers.createUser(userId, userName, 'ru', (err) => {
        if (err) {
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
            return;
        }
        ctx.reply('–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMenuForLang('ru', false));
    });
});

bot.action('create_user_en', (ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name;
    // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —è–∑—ã–∫–æ–º 'en'
    dbHandlers.createUser(userId, userName, 'en', (err) => {
        if (err) {
            ctx.reply('An error occurred during registration.');
            return;
        }
        ctx.reply('Language is set to English. Welcome!');
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', getMenuForLang('en', false));
    });
});

}; // module export